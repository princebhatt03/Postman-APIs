// Use This Code in the Frontend and uncomment the code in the controller for connecting it to the Frontend

// ********************** USER ****************************

// 1.  For Registration of User

import axios from 'axios';

const handleRegister = async () => {
  try {
    const response = await axios.post('/api/users/register', {
      fullName,
      username,
      email,
      mobile,
      password,
    });

    if (response.data.success) {
      alert('Registration Successful');
      // redirect to login page or dashboard
      navigate('/login');
    }
  } catch (err) {
    console.error(err);
    alert(err.response?.data?.message || 'Something went wrong');
  }
};

// 2. For Logining of User

import axios from 'axios';

const handleLogin = async () => {
  try {
    const response = await axios.post('/api/users/login', {
      username,
      password,
    });

    if (response.data.success) {
      localStorage.setItem('user', JSON.stringify(response.data.user));
      alert('Login Successful!');
      navigate('/dashboard');
    }
  } catch (err) {
    alert(err.response?.data?.message || 'Login failed!');
  }
};

// 3.  For Updating of User

const handleUpdate = async () => {
  try {
    const response = await axios.patch(`/api/users/update/${userId}`, {
      fullName,
      mobile,
      // Include only fields to be updated
    });

    if (response.data.success) {
      alert('Profile Updated');
      navigate('/profile');
    }
  } catch (err) {
    alert(err.response?.data?.message || 'Update failed!');
  }
};

// 4.  For Deleting of User

const deleteAccount = async () => {
  try {
    const user = JSON.parse(localStorage.getItem("user"));
    const userId = user?.id;

    const response = await axios.delete(`/api/users/delete/${userId}`);

    if (response.data.success) {
      alert("Account deleted");
      localStorage.clear();
      navigate('/register');
    }
  } catch (err) {
    alert(err.response?.data?.message || "Delete failed");
  }
};

// *********************** ADMIN ************************

import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const navigate = useNavigate();

// 1. Admin Registration
const handleAdminRegister = async () => {
  try {
    const response = await axios.post('/api/admins/register', {
      Name,
      AdminID,
      adminUsername,
      email,
      mobile,
      password,
    });

    if (response.data.success) {
      alert('Admin Registration Successful');
      // Redirect admin to login page after successful registration
      navigate('/admin/login');
    }
  } catch (err) {
    console.error(err);
    alert(err.response?.data?.message || 'Something went wrong');
  }
};

// 2. Admin Login
const handleAdminLogin = async () => {
  try {
    const response = await axios.post('/api/admins/login', {
      adminUsername,
      password,
    });

    if (response.data.success) {
      // Save admin info in localStorage for session persistence
      localStorage.setItem('admin', JSON.stringify(response.data.admin));
      alert('Admin Login Successful!');
      // Redirect admin to dashboard after login
      navigate('/admin/dashboard');
    }
  } catch (err) {
    alert(err.response?.data?.message || 'Login failed!');
  }
};

// 3. Admin Profile Update
const handleAdminUpdate = async () => {
  try {
    // Assuming you have adminId stored somewhere (e.g., from localStorage)
    const admin = JSON.parse(localStorage.getItem('admin'));
    const adminId = admin?.id;

    const response = await axios.patch(`/api/admins/update/${adminId}`, {
      Name,
      AdminID,
      adminUsername,
      email,
      mobile,
      // Include only the fields you want to update here
      // password: 'newPasswordIfAny', // Hashing handled on backend
    });

    if (response.data.success) {
      alert('Admin Profile Updated');
      navigate('/admin/profile');
    }
  } catch (err) {
    alert(err.response?.data?.message || 'Update failed!');
  }
};

// 4. Admin Account Deletion
const handleAdminDelete = async () => {
  try {
    const admin = JSON.parse(localStorage.getItem('admin'));
    const adminId = admin?.id;

    const response = await axios.delete(`/api/admins/delete/${adminId}`);

    if (response.data.success) {
      alert('Admin Account deleted');
      // Clear admin session and redirect to registration or login page
      localStorage.removeItem('admin');
      navigate('/admin/register');
    }
  } catch (err) {
    alert(err.response?.data?.message || 'Delete failed');
  }
};
